Etape : 
Créer base de données users
créer classe users
créer vue générique pour login/register... > php artisan ui:auth
Register/Login/Logout fait
ajout de user admin au démarrage du serveur avec database/seeders -> php artisan make:seed UsersTableSeeder
ensuite php artisan db:seed
Ajout d'un UserController pour changer les roles des users
Ajout de tables pour patient et doctor
Ajout de données au démarrage(db : seed)
Ajout d'un PatientDoctorController pour ajouter doctor au patient
Ajout d'un middleware (CheckRole) et ajout dans Kernel pour restreindre les pages au différents roles (patient ne peut pas aller sur la page admin en tappant dans l'url)
Ajout dans route le chemin et la restreinte des urls






A FAIRE :
Montrer le docteur du patient (soit en ajoutant une page soit en l'ajoutant dans la page Doctors)
Créer une page pour que le docteur puisse ajouter les patients (avec leur consentement)




COMMENT LANCER LE PROJET : 
Configuration du .env(je l'ai pas mit dans le git.ignore donc normalement tu dois rien changer)
composer update(pour mettre à jour)
composer install (pour installer les librairies pour le projet)
[php artisan migrate:reset (pour clean les tables de la database)
php artisan migrate (pour créer les tables contenu dans les migrations (database/migrations)
php artisan db:seed(pour ajouter des records (surtout l'admin) dans la database)
php artisan serve (lancer le serveur)]
# refresh la database et executer les seeds
ou sinon php artisan migrate:fresh --seed 




//////////////Pour développer ce projet en Laravel, voici une approche possible :

Modélisation de la base de données : à partir des informations fournies dans le document, vous pouvez modéliser la base de données en utilisant les outils fournis par Laravel (par exemple, Eloquent ORM). Vous pouvez créer les tables pour les utilisateurs, les médecins, les patients, les dossiers médicaux et les fichiers, ainsi que les relations entre eux.

Mise en place de l'authentification : vous pouvez utiliser le système d'authentification fourni par Laravel pour permettre aux utilisateurs de se connecter et de s'inscrire. Vous pouvez également ajouter une fonctionnalité de révocation de l'authentification pour les utilisateurs.

Gestion des utilisateurs : vous pouvez créer une interface pour permettre aux administrateurs d'approuver ou de supprimer les comptes des médecins et des patients.

Gestion des dossiers médicaux : vous pouvez permettre aux patients de consulter leurs dossiers médicaux et aux médecins de consulter les dossiers des patients qui leur sont associés. Vous pouvez également permettre aux patients de modifier, de supprimer et d'ajouter des fichiers à leurs dossiers médicaux, ainsi qu'aux médecins de faire de même pour les patients qui leur sont associés.

Gestion des rendez-vous : vous pouvez permettre aux patients de prendre des rendez-vous avec leurs médecins et de voir les rendez-vous à venir. Les médecins peuvent également voir leur emploi du temps et les rendez-vous prévus.

Sécurité : vous pouvez implémenter des mesures de sécurité pour protéger les données stockées sur le serveur, telles que la cryptographie pour les fichiers stockés, la protection contre les attaques par injection de code et la limitation des tentatives de connexion pour prévenir les attaques par force brute.

Tests et déploiement : vous pouvez tester le projet pour vous assurer qu'il fonctionne correctement et le déployer sur un serveur de production.

Il s'agit d'une approche générale pour le développement de ce projet en utilisant Laravel. Vous pouvez ajuster cette approche en fonction de vos compétences en programmation et de vos besoins spécifiques.




////END TO END
Pour mettre en place le chiffrement de bout en bout pour les fonctionnalités que vous avez mentionnées, voici une approche générale que vous pouvez suivre :

Génération des clés privées et publiques :

Utilisez une bibliothèque de cryptographie pour générer une paire de clés publique/privée pour chaque patient et médecin.
Stockez de manière sécurisée les clés privées des patients et des médecins, en utilisant des techniques telles que le chiffrement de clés et le stockage dans un coffre-fort sécurisé.
Chiffrement des fichiers médicaux :

Lorsqu'un patient soumet un fichier médical, chiffrez-le en utilisant la clé publique du patient avant de le stocker sur le serveur.
De même, lorsqu'un médecin soumet un fichier au nom d'un patient, chiffrez-le en utilisant la clé publique du patient avant de le stocker.
Utilisez des algorithmes de chiffrement robustes, tels que AES (Advanced Encryption Standard), pour garantir la sécurité des données.
Déchiffrement des fichiers médicaux :

Lorsqu'un patient ou un médecin accède à un fichier médical, récupérez le fichier chiffré depuis le serveur.
Utilisez la clé privée correspondante (qui est stockée de manière sécurisée) pour déchiffrer le fichier localement.
Le fichier déchiffré sera alors disponible pour consultation ou modification.
Contrôle d'accès :

Mettez en place un système d'autorisation strict pour garantir que seuls les patients concernés et les médecins associés ont accès aux fichiers médicaux.
Lorsqu'un médecin souhaite accéder aux fichiers d'un patient, vérifiez d'abord s'il existe une demande de consentement approuvée entre le patient et le médecin.
Si une demande de consentement est approuvée, autorisez l'accès au fichier médical correspondant.
Il est important de noter que la mise en œuvre de la cryptographie et de la sécurité est un processus complexe et critique. Il est recommandé de consulter des experts en sécurité pour vous aider à concevoir et à implémenter correctement ces fonctionnalités de sécurité dans votre système.